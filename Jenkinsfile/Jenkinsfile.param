pipeline {
    agent any
    environment {
        GIT_REPO = scm.getUserRemoteConfigs()[0].getUrl() // リポジトリURLを取得
        CREDS_ID = scm.getUserRemoteConfigs()[0].getCredentialsId() // credentialsIdを取得
    }
    stages {
        stage('Get Default Branch') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.CREDS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        env.DEFAULT_BRANCH = sh(script: """
                            git ls-remote --symref https://${GIT_USER}:${GIT_TOKEN}@${env.GIT_REPO.replace('https://', '')} HEAD \
                            | grep "^ref:" | sed "s@^ref: refs/heads/@@;s@\\sHEAD@@"
                        """, returnStdout: true).trim()
                        if (!env.DEFAULT_BRANCH) {
                            error "Failed to determine the default branch."
                        }
                        echo "Default branch is: ${env.DEFAULT_BRANCH}"
                    }
                }
            }
        }
        stage('SCM Checkout') {
            steps {
                script {
                    checkout(scm)
                    echo "SCM Checkout completed."
                }
            }
        }
        stage('Update Node List') {
            steps {
                script {
                    sh "git fetch --all"
                    def nodeListFiles = sh(script: """
                        git ls-tree --name-only -r ${env.DEFAULT_BRANCH} | grep "Jenkinsfile/node_list.txt" || true
                    """, returnStdout: true).trim()
                    if (nodeListFiles) {
                        writeFile file: "node_list_files.txt", text: nodeListFiles
                        echo "Node list updated:\n${nodeListFiles}"
                    } else {
                        echo "No node_list.txt found."
                    }
                }
            }
        }
        stage('Update Branch List') {
            steps {
                script {
                    sh "git fetch --all"
                    def branches = sh(script: """
                        git branch -r | sed "s|origin/||" | grep -v "HEAD"
                    """, returnStdout: true).trim()
                    if (branches) {
                        writeFile file: "branches.txt", text: branches
                        echo "Branch list updated:\n${branches}"
                    } else {
                        echo "No branches found."
                    }
                }
            }
        }
        stage('Update Python File List') {
            steps {
                script {
                    sh "git fetch --all"
                    def pyFiles = sh(script: """
                        git ls-tree --name-only -r ${env.DEFAULT_BRANCH} | grep "src/testcase/.*\\.py" || true
                    """, returnStdout: true).trim()
                    if (pyFiles) {
                        writeFile file: "python_files.txt", text: pyFiles
                        echo "Python file list updated:\n${pyFiles}"
                    } else {
                        echo "No Python files found."
                    }
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: '*.txt', fingerprint: true
        }
    }
}
