pipeline {
    agent any
    environment {
        GIT_REPO = scm.getUserRemoteConfigs()[0].getUrl()        // リポジトリURL
        CREDS_ID = scm.getUserRemoteConfigs()[0].getCredentialsId() // credentialsId
    }

    // Jenkinsfile 内で共通的に使う関数を定義
    // （※ Jenkins のバージョンや設定によっては pipeline ブロックの外に置く必要がある場合もあります）
    stages {
        stage('Get Default Branch') {
            steps {
                script {
                    // リポジトリのデフォルトブランチ名を取得
                    withCredentials([usernamePassword(credentialsId: env.CREDS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        env.DEFAULT_BRANCH = sh(script: """
                            git ls-remote --symref https://${GIT_USER}:${GIT_TOKEN}@${env.GIT_REPO.replace('https://', '')} HEAD \
                            | grep "^ref:" | sed "s@^ref: refs/heads/@@;s@\\sHEAD@@"
                        """, returnStdout: true).trim()

                        if (!env.DEFAULT_BRANCH) {
                            error "Failed to determine the default branch."
                        }
                        echo "Default branch is: ${env.DEFAULT_BRANCH}"
                    }
                }
            }
        }

        stage('Prepare Repo') {
            steps {
                script {
                    // リポジトリをチェックアウトして最新化
                    checkout(scm) // Jenkins のデフォルト機能で一旦チェックアウト

                    withCredentials([usernamePassword(credentialsId: env.CREDS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        sh """
                            git remote set-url origin https://${GIT_USER}:${GIT_TOKEN}@${env.GIT_REPO.replace('https://', '')}
                            git fetch origin
                            git checkout ${env.DEFAULT_BRANCH}
                            git pull
                        """
                    }
                    echo "Repository prepared on branch: ${env.DEFAULT_BRANCH}"
                }
            }
        }

        stage('Collect Info') {
            steps {
                script {
                    // Node List 取得
                    def nodeListContent = sh(script: '''
                        if [ -f Jenkinsfile/node_list.txt ]; then
                            cat Jenkinsfile/node_list.txt
                        else
                            echo "No node list found."
                        fi
                    ''', returnStdout: true).trim()
                    writeFile file: "node_list.txt", text: nodeListContent

                    // Branch List 取得
                    def branches = sh(script: '''
                        git branch -r | sed "s|origin/||" | grep -v "HEAD" | sed "s/^ *//;s/ *\$//"
                    ''', returnStdout: true).trim()
                    writeFile file: "branches.txt", text: branches

                    // Python File List 取得
                    def pyFiles = sh(script: """
                        git ls-tree --name-only -r ${env.DEFAULT_BRANCH} | grep "src/testcase/.*\\.py" || true
                    """, returnStdout: true).trim()
                    writeFile file: "python_files.txt", text: pyFiles

                    echo """
                    === Node List ===
                    ${nodeListContent}

                    === Branch List ===
                    ${branches}

                    === Python Files ===
                    ${pyFiles}
                    """
                }
            }
        }
    }
    post {
        always {
            // 取得したファイルのみをアーカイブ
            archiveArtifacts artifacts: 'node_list.txt, branches.txt, python_files.txt', fingerprint: true
        }
    }
}
