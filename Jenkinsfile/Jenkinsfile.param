pipeline {
    agent any
    environment {
        GIT_REPO = scm.getUserRemoteConfigs()[0].getUrl() // リポジトリURLを取得
        CREDS_ID = scm.getUserRemoteConfigs()[0].getCredentialsId() // credentialsIdを取得
    }
    stages {
        stage('Get Default Branch') {
            steps {
                script {
                    // デフォルトブランチを取得
                    withCredentials([usernamePassword(credentialsId: env.CREDS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        env.DEFAULT_BRANCH = sh(script: """
                            git ls-remote --symref https://${GIT_USER}:${GIT_TOKEN}@${env.GIT_REPO.replace('https://', '')} HEAD \
                            | grep "^ref:" | sed "s@^ref: refs/heads/@@;s@\\sHEAD@@"
                        """, returnStdout: true).trim()
                        if (!env.DEFAULT_BRANCH) {
                            error "Failed to determine the default branch."
                        }
                        echo "Default branch is: ${env.DEFAULT_BRANCH}"
                    }
                }
            }
        }
        stage('SCM Checkout') {
            steps {
                script {
                    // リポジトリをチェックアウト
                    checkout(scm)
                    echo "SCM Checkout completed."
                }
            }
        }
        stage('Update Node List') {
            steps {
                script {
                    // ノードリストの内容を取得
                    withCredentials([usernamePassword(credentialsId: env.CREDS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        sh """
                            git remote set-url origin https://${GIT_USER}:${GIT_TOKEN}@${env.GIT_REPO.replace('https://', '')}
                            git fetch origin
                            git checkout ${env.DEFAULT_BRANCH}
                            git pull
                        """
                        def nodeListContent = sh(script: """
                            if [ -f Jenkinsfile/node_list.txt ]; then
                                cat Jenkinsfile/node_list.txt
                            else
                                echo "No node list found."
                            fi
                        """, returnStdout: true).trim()
                        writeFile file: "node_list.txt", text: nodeListContent // ノードリストの内容を保存
                        echo "Node list updated:\n${nodeListContent}"
                    }
                }
            }
        }
        stage('Update Branch List') {
            steps {
                script {
                    // ブランチリストの取得と整形
                    withCredentials([usernamePassword(credentialsId: env.CREDS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        sh """
                            git remote set-url origin https://${GIT_USER}:${GIT_TOKEN}@${env.GIT_REPO.replace('https://', '')}
                            git fetch origin
                        """
                        def branches = sh(script: """
                            git branch -r | sed "s|origin/||" | grep -v "HEAD" | sed 's/^ *//;s/ *\$//'
                        """, returnStdout: true).trim()
                        writeFile file: "branches.txt", text: branches // 整形済みのブランチリストを保存
                        echo "Branch list updated:\n${branches}"
                    }
                }
            }
        }
        stage('Update Python File List') {
            steps {
                script {
                    // Pythonファイルリストの取得
                    withCredentials([usernamePassword(credentialsId: env.CREDS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
                        sh """
                            git remote set-url origin https://${GIT_USER}:${GIT_TOKEN}@${env.GIT_REPO.replace('https://', '')}
                            git fetch origin
                            git checkout ${env.DEFAULT_BRANCH}
                            git pull
                        """
                        def pyFiles = sh(script: """
                            git ls-tree --name-only -r ${env.DEFAULT_BRANCH} | grep "src/testcase/.*\\.py" || true
                        """, returnStdout: true).trim()
                        writeFile file: "python_files.txt", text: pyFiles // Pythonファイルリストを保存
                        echo "Python file list updated:\n${pyFiles}"
                    }
                }
            }
        }
    }
    post {
        always {
            // 必要なファイルのみをアーカイブ
            archiveArtifacts artifacts: 'node_list.txt, branches.txt, python_files.txt', fingerprint: true
        }
    }
}
