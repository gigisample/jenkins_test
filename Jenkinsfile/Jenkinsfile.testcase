pipeline {
    agent { label "${params.NODE}" }
    parameters {
        editableChoice(
            name: 'NODE',
            description: 'Select a node to run the job',
            choices: getFileContentAsCommaSeparatedString('/var/jenkins_home/workspace/jenkinsfile/parameter_getter/node_list_files.txt'), // カンマ区切りの文字列を返す
            restrict: false
        )
        editableChoice(
            name: 'BRANCH',
            description: 'Select a Git branch',
            choices: getFileContentAsCommaSeparatedString('/var/jenkins_home/workspace/jenkinsfile/parameter_getter/branches.txt'), // 修正
            restrict: false
        )
        editableChoice(
            name: 'PY_FILE',
            description: 'Select a Python file to execute',
            choices: getFileContentAsCommaSeparatedString('/var/jenkins_home/workspace/jenkinsfile/parameter_getter/python_files.txt'), // 修正
            restrict: false
        )
        editableChoice(
            name: 'ARGS',
            description: 'Enter arguments for the Python script',
            choices: getFileContentAsCommaSeparatedString('/var/jenkins_home/workspace/jenkinsfile/parameter_getter/args_history.txt'), // 修正
            restrict: false
        )
    }
    stages {
        stage('Execute Python Script') {
            steps {
                script {
                    def command = "python3 ${params.PY_FILE} ${params.ARGS}"
                    echo "Executing: ${command}"
                    sh command
                }
            }
        }
        stage('Save Arguments') {
            steps {
                script {
                    def argsFile = '/var/jenkins_home/jenkinsfile/testcase_execute/args_history.txt'
                    if (!fileExists(argsFile)) {
                        writeFile file: argsFile, text: "${params.ARGS}\n"
                    } else {
                        def argsHistory = readFile(argsFile).split('\n')
                        if (!argsHistory.contains(params.ARGS)) {
                            writeFile file: argsFile, text: "${readFile(argsFile)}${params.ARGS}\n"
                        }
                    }
                    echo "Arguments saved to ${argsFile}"
                }
            }
        }
    }
}

// ファイルを読み込んでカンマ区切りの文字列として返す
def getFileContentAsCommaSeparatedString(filePath) {
    try {
        return readFile(filePath).split('\n').findAll { it.trim() }.join(',') // 改行で分割し、空行を除去してカンマ区切りに変換
    } catch (Exception e) {
        return "" // ファイルが存在しない場合、空の文字列を返す
    }
}
