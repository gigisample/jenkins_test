pipeline {
    agent { label "${params.NODE}" }
    parameters {
        editableChoice(
            name: 'NODE',
            description: 'Select a node to run the job',
            choices: getChoicesWithinNode('jenkinsfile/parameter_getter/node_list_files.txt'), // node ブロック内でリストを取得
            restrict: false
        )
        editableChoice(
            name: 'BRANCH',
            description: 'Select a Git branch',
            choices: getChoicesWithinNode('jenkinsfile/parameter_getter/branches.txt'),
            restrict: false
        )
        editableChoice(
            name: 'PY_FILE',
            description: 'Select a Python file to execute',
            choices: getChoicesWithinNode('jenkinsfile/parameter_getter/python_files.txt'),
            restrict: false
        )
        editableChoice(
            name: 'ARGS',
            description: 'Enter arguments for the Python script',
            choices: getChoicesWithinNode('jenkinsfile/parameter_getter/args_history.txt'),
            restrict: false
        )
    }
    stages {
        stage('Execute Python Script') {
            steps {
                script {
                    def command = "python3 ${params.PY_FILE} ${params.ARGS}"
                    echo "Executing: ${command}"
                    sh command
                }
            }
        }
        stage('Save Arguments') {
            steps {
                script {
                    def argsFile = 'jenkinsfile/testcase_execute/args_history.txt'
                    node {
                        if (!fileExists(argsFile)) {
                            writeFile file: argsFile, text: "${params.ARGS}\n"
                        } else {
                            def argsHistory = readFile(argsFile).readLines()
                            if (!argsHistory.contains(params.ARGS)) {
                                writeFile file: argsFile, text: argsHistory.join('\n') + "\n${params.ARGS}\n"
                            }
                        }
                        echo "Arguments saved to ${argsFile}"
                    }
                }
            }
        }
    }
}

// ファイルを読み込んでリストとして返す
def getChoicesWithinNode(filePath) {
    try {
        node {
            if (fileExists(filePath)) {
                return readFile(filePath).readLines() // ファイルの各行をリストとして返す
            } else {
                return ['Error: File not found'] // ファイルが見つからない場合のデフォルト値
            }
        }
    } catch (Exception e) {
        return ["Error: ${e.message}"] // エラーが発生した場合のデフォルト値
    }
}